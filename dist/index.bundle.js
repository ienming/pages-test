/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/cross-fetch/dist/browser-ponyfill.js":
/*!***********************************************************!*\
  !*** ./node_modules/cross-fetch/dist/browser-ponyfill.js ***!
  \***********************************************************/
/***/ (function(module, exports) {

eval("var global = typeof self !== 'undefined' ? self : this;\nvar __self__ = (function () {\nfunction F() {\nthis.fetch = false;\nthis.DOMException = global.DOMException\n}\nF.prototype = global;\nreturn new F();\n})();\n(function(self) {\n\nvar irrelevant = (function (exports) {\n\n  var support = {\n    searchParams: 'URLSearchParams' in self,\n    iterable: 'Symbol' in self && 'iterator' in Symbol,\n    blob:\n      'FileReader' in self &&\n      'Blob' in self &&\n      (function() {\n        try {\n          new Blob();\n          return true\n        } catch (e) {\n          return false\n        }\n      })(),\n    formData: 'FormData' in self,\n    arrayBuffer: 'ArrayBuffer' in self\n  };\n\n  function isDataView(obj) {\n    return obj && DataView.prototype.isPrototypeOf(obj)\n  }\n\n  if (support.arrayBuffer) {\n    var viewClasses = [\n      '[object Int8Array]',\n      '[object Uint8Array]',\n      '[object Uint8ClampedArray]',\n      '[object Int16Array]',\n      '[object Uint16Array]',\n      '[object Int32Array]',\n      '[object Uint32Array]',\n      '[object Float32Array]',\n      '[object Float64Array]'\n    ];\n\n    var isArrayBufferView =\n      ArrayBuffer.isView ||\n      function(obj) {\n        return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1\n      };\n  }\n\n  function normalizeName(name) {\n    if (typeof name !== 'string') {\n      name = String(name);\n    }\n    if (/[^a-z0-9\\-#$%&'*+.^_`|~]/i.test(name)) {\n      throw new TypeError('Invalid character in header field name')\n    }\n    return name.toLowerCase()\n  }\n\n  function normalizeValue(value) {\n    if (typeof value !== 'string') {\n      value = String(value);\n    }\n    return value\n  }\n\n  // Build a destructive iterator for the value list\n  function iteratorFor(items) {\n    var iterator = {\n      next: function() {\n        var value = items.shift();\n        return {done: value === undefined, value: value}\n      }\n    };\n\n    if (support.iterable) {\n      iterator[Symbol.iterator] = function() {\n        return iterator\n      };\n    }\n\n    return iterator\n  }\n\n  function Headers(headers) {\n    this.map = {};\n\n    if (headers instanceof Headers) {\n      headers.forEach(function(value, name) {\n        this.append(name, value);\n      }, this);\n    } else if (Array.isArray(headers)) {\n      headers.forEach(function(header) {\n        this.append(header[0], header[1]);\n      }, this);\n    } else if (headers) {\n      Object.getOwnPropertyNames(headers).forEach(function(name) {\n        this.append(name, headers[name]);\n      }, this);\n    }\n  }\n\n  Headers.prototype.append = function(name, value) {\n    name = normalizeName(name);\n    value = normalizeValue(value);\n    var oldValue = this.map[name];\n    this.map[name] = oldValue ? oldValue + ', ' + value : value;\n  };\n\n  Headers.prototype['delete'] = function(name) {\n    delete this.map[normalizeName(name)];\n  };\n\n  Headers.prototype.get = function(name) {\n    name = normalizeName(name);\n    return this.has(name) ? this.map[name] : null\n  };\n\n  Headers.prototype.has = function(name) {\n    return this.map.hasOwnProperty(normalizeName(name))\n  };\n\n  Headers.prototype.set = function(name, value) {\n    this.map[normalizeName(name)] = normalizeValue(value);\n  };\n\n  Headers.prototype.forEach = function(callback, thisArg) {\n    for (var name in this.map) {\n      if (this.map.hasOwnProperty(name)) {\n        callback.call(thisArg, this.map[name], name, this);\n      }\n    }\n  };\n\n  Headers.prototype.keys = function() {\n    var items = [];\n    this.forEach(function(value, name) {\n      items.push(name);\n    });\n    return iteratorFor(items)\n  };\n\n  Headers.prototype.values = function() {\n    var items = [];\n    this.forEach(function(value) {\n      items.push(value);\n    });\n    return iteratorFor(items)\n  };\n\n  Headers.prototype.entries = function() {\n    var items = [];\n    this.forEach(function(value, name) {\n      items.push([name, value]);\n    });\n    return iteratorFor(items)\n  };\n\n  if (support.iterable) {\n    Headers.prototype[Symbol.iterator] = Headers.prototype.entries;\n  }\n\n  function consumed(body) {\n    if (body.bodyUsed) {\n      return Promise.reject(new TypeError('Already read'))\n    }\n    body.bodyUsed = true;\n  }\n\n  function fileReaderReady(reader) {\n    return new Promise(function(resolve, reject) {\n      reader.onload = function() {\n        resolve(reader.result);\n      };\n      reader.onerror = function() {\n        reject(reader.error);\n      };\n    })\n  }\n\n  function readBlobAsArrayBuffer(blob) {\n    var reader = new FileReader();\n    var promise = fileReaderReady(reader);\n    reader.readAsArrayBuffer(blob);\n    return promise\n  }\n\n  function readBlobAsText(blob) {\n    var reader = new FileReader();\n    var promise = fileReaderReady(reader);\n    reader.readAsText(blob);\n    return promise\n  }\n\n  function readArrayBufferAsText(buf) {\n    var view = new Uint8Array(buf);\n    var chars = new Array(view.length);\n\n    for (var i = 0; i < view.length; i++) {\n      chars[i] = String.fromCharCode(view[i]);\n    }\n    return chars.join('')\n  }\n\n  function bufferClone(buf) {\n    if (buf.slice) {\n      return buf.slice(0)\n    } else {\n      var view = new Uint8Array(buf.byteLength);\n      view.set(new Uint8Array(buf));\n      return view.buffer\n    }\n  }\n\n  function Body() {\n    this.bodyUsed = false;\n\n    this._initBody = function(body) {\n      this._bodyInit = body;\n      if (!body) {\n        this._bodyText = '';\n      } else if (typeof body === 'string') {\n        this._bodyText = body;\n      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n        this._bodyBlob = body;\n      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n        this._bodyFormData = body;\n      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n        this._bodyText = body.toString();\n      } else if (support.arrayBuffer && support.blob && isDataView(body)) {\n        this._bodyArrayBuffer = bufferClone(body.buffer);\n        // IE 10-11 can't handle a DataView body.\n        this._bodyInit = new Blob([this._bodyArrayBuffer]);\n      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {\n        this._bodyArrayBuffer = bufferClone(body);\n      } else {\n        this._bodyText = body = Object.prototype.toString.call(body);\n      }\n\n      if (!this.headers.get('content-type')) {\n        if (typeof body === 'string') {\n          this.headers.set('content-type', 'text/plain;charset=UTF-8');\n        } else if (this._bodyBlob && this._bodyBlob.type) {\n          this.headers.set('content-type', this._bodyBlob.type);\n        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');\n        }\n      }\n    };\n\n    if (support.blob) {\n      this.blob = function() {\n        var rejected = consumed(this);\n        if (rejected) {\n          return rejected\n        }\n\n        if (this._bodyBlob) {\n          return Promise.resolve(this._bodyBlob)\n        } else if (this._bodyArrayBuffer) {\n          return Promise.resolve(new Blob([this._bodyArrayBuffer]))\n        } else if (this._bodyFormData) {\n          throw new Error('could not read FormData body as blob')\n        } else {\n          return Promise.resolve(new Blob([this._bodyText]))\n        }\n      };\n\n      this.arrayBuffer = function() {\n        if (this._bodyArrayBuffer) {\n          return consumed(this) || Promise.resolve(this._bodyArrayBuffer)\n        } else {\n          return this.blob().then(readBlobAsArrayBuffer)\n        }\n      };\n    }\n\n    this.text = function() {\n      var rejected = consumed(this);\n      if (rejected) {\n        return rejected\n      }\n\n      if (this._bodyBlob) {\n        return readBlobAsText(this._bodyBlob)\n      } else if (this._bodyArrayBuffer) {\n        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))\n      } else if (this._bodyFormData) {\n        throw new Error('could not read FormData body as text')\n      } else {\n        return Promise.resolve(this._bodyText)\n      }\n    };\n\n    if (support.formData) {\n      this.formData = function() {\n        return this.text().then(decode)\n      };\n    }\n\n    this.json = function() {\n      return this.text().then(JSON.parse)\n    };\n\n    return this\n  }\n\n  // HTTP methods whose capitalization should be normalized\n  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT'];\n\n  function normalizeMethod(method) {\n    var upcased = method.toUpperCase();\n    return methods.indexOf(upcased) > -1 ? upcased : method\n  }\n\n  function Request(input, options) {\n    options = options || {};\n    var body = options.body;\n\n    if (input instanceof Request) {\n      if (input.bodyUsed) {\n        throw new TypeError('Already read')\n      }\n      this.url = input.url;\n      this.credentials = input.credentials;\n      if (!options.headers) {\n        this.headers = new Headers(input.headers);\n      }\n      this.method = input.method;\n      this.mode = input.mode;\n      this.signal = input.signal;\n      if (!body && input._bodyInit != null) {\n        body = input._bodyInit;\n        input.bodyUsed = true;\n      }\n    } else {\n      this.url = String(input);\n    }\n\n    this.credentials = options.credentials || this.credentials || 'same-origin';\n    if (options.headers || !this.headers) {\n      this.headers = new Headers(options.headers);\n    }\n    this.method = normalizeMethod(options.method || this.method || 'GET');\n    this.mode = options.mode || this.mode || null;\n    this.signal = options.signal || this.signal;\n    this.referrer = null;\n\n    if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n      throw new TypeError('Body not allowed for GET or HEAD requests')\n    }\n    this._initBody(body);\n  }\n\n  Request.prototype.clone = function() {\n    return new Request(this, {body: this._bodyInit})\n  };\n\n  function decode(body) {\n    var form = new FormData();\n    body\n      .trim()\n      .split('&')\n      .forEach(function(bytes) {\n        if (bytes) {\n          var split = bytes.split('=');\n          var name = split.shift().replace(/\\+/g, ' ');\n          var value = split.join('=').replace(/\\+/g, ' ');\n          form.append(decodeURIComponent(name), decodeURIComponent(value));\n        }\n      });\n    return form\n  }\n\n  function parseHeaders(rawHeaders) {\n    var headers = new Headers();\n    // Replace instances of \\r\\n and \\n followed by at least one space or horizontal tab with a space\n    // https://tools.ietf.org/html/rfc7230#section-3.2\n    var preProcessedHeaders = rawHeaders.replace(/\\r?\\n[\\t ]+/g, ' ');\n    preProcessedHeaders.split(/\\r?\\n/).forEach(function(line) {\n      var parts = line.split(':');\n      var key = parts.shift().trim();\n      if (key) {\n        var value = parts.join(':').trim();\n        headers.append(key, value);\n      }\n    });\n    return headers\n  }\n\n  Body.call(Request.prototype);\n\n  function Response(bodyInit, options) {\n    if (!options) {\n      options = {};\n    }\n\n    this.type = 'default';\n    this.status = options.status === undefined ? 200 : options.status;\n    this.ok = this.status >= 200 && this.status < 300;\n    this.statusText = 'statusText' in options ? options.statusText : 'OK';\n    this.headers = new Headers(options.headers);\n    this.url = options.url || '';\n    this._initBody(bodyInit);\n  }\n\n  Body.call(Response.prototype);\n\n  Response.prototype.clone = function() {\n    return new Response(this._bodyInit, {\n      status: this.status,\n      statusText: this.statusText,\n      headers: new Headers(this.headers),\n      url: this.url\n    })\n  };\n\n  Response.error = function() {\n    var response = new Response(null, {status: 0, statusText: ''});\n    response.type = 'error';\n    return response\n  };\n\n  var redirectStatuses = [301, 302, 303, 307, 308];\n\n  Response.redirect = function(url, status) {\n    if (redirectStatuses.indexOf(status) === -1) {\n      throw new RangeError('Invalid status code')\n    }\n\n    return new Response(null, {status: status, headers: {location: url}})\n  };\n\n  exports.DOMException = self.DOMException;\n  try {\n    new exports.DOMException();\n  } catch (err) {\n    exports.DOMException = function(message, name) {\n      this.message = message;\n      this.name = name;\n      var error = Error(message);\n      this.stack = error.stack;\n    };\n    exports.DOMException.prototype = Object.create(Error.prototype);\n    exports.DOMException.prototype.constructor = exports.DOMException;\n  }\n\n  function fetch(input, init) {\n    return new Promise(function(resolve, reject) {\n      var request = new Request(input, init);\n\n      if (request.signal && request.signal.aborted) {\n        return reject(new exports.DOMException('Aborted', 'AbortError'))\n      }\n\n      var xhr = new XMLHttpRequest();\n\n      function abortXhr() {\n        xhr.abort();\n      }\n\n      xhr.onload = function() {\n        var options = {\n          status: xhr.status,\n          statusText: xhr.statusText,\n          headers: parseHeaders(xhr.getAllResponseHeaders() || '')\n        };\n        options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');\n        var body = 'response' in xhr ? xhr.response : xhr.responseText;\n        resolve(new Response(body, options));\n      };\n\n      xhr.onerror = function() {\n        reject(new TypeError('Network request failed'));\n      };\n\n      xhr.ontimeout = function() {\n        reject(new TypeError('Network request failed'));\n      };\n\n      xhr.onabort = function() {\n        reject(new exports.DOMException('Aborted', 'AbortError'));\n      };\n\n      xhr.open(request.method, request.url, true);\n\n      if (request.credentials === 'include') {\n        xhr.withCredentials = true;\n      } else if (request.credentials === 'omit') {\n        xhr.withCredentials = false;\n      }\n\n      if ('responseType' in xhr && support.blob) {\n        xhr.responseType = 'blob';\n      }\n\n      request.headers.forEach(function(value, name) {\n        xhr.setRequestHeader(name, value);\n      });\n\n      if (request.signal) {\n        request.signal.addEventListener('abort', abortXhr);\n\n        xhr.onreadystatechange = function() {\n          // DONE (success or failure)\n          if (xhr.readyState === 4) {\n            request.signal.removeEventListener('abort', abortXhr);\n          }\n        };\n      }\n\n      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);\n    })\n  }\n\n  fetch.polyfill = true;\n\n  if (!self.fetch) {\n    self.fetch = fetch;\n    self.Headers = Headers;\n    self.Request = Request;\n    self.Response = Response;\n  }\n\n  exports.Headers = Headers;\n  exports.Request = Request;\n  exports.Response = Response;\n  exports.fetch = fetch;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n  return exports;\n\n}({}));\n})(__self__);\n__self__.fetch.ponyfill = true;\n// Remove \"polyfill\" property added by whatwg-fetch\ndelete __self__.fetch.polyfill;\n// Choose between native implementation (global) or custom implementation (__self__)\n// var ctx = global.fetch ? global : __self__;\nvar ctx = __self__; // this line disable service worker support temporarily\nexports = ctx.fetch // To enable: import fetch from 'cross-fetch'\nexports[\"default\"] = ctx.fetch // For TypeScript consumers without esModuleInterop.\nexports.fetch = ctx.fetch // To enable: import {fetch} from 'cross-fetch'\nexports.Headers = ctx.Headers\nexports.Request = ctx.Request\nexports.Response = ctx.Response\nmodule.exports = exports\n\n\n//# sourceURL=webpack://appwrite/./node_modules/cross-fetch/dist/browser-ponyfill.js?");

/***/ }),

/***/ "./node_modules/isomorphic-form-data/lib/browser.js":
/*!**********************************************************!*\
  !*** ./node_modules/isomorphic-form-data/lib/browser.js ***!
  \**********************************************************/
/***/ ((module) => {

eval("module.exports = window.FormData\n\n\n//# sourceURL=webpack://appwrite/./node_modules/isomorphic-form-data/lib/browser.js?");

/***/ }),

/***/ "./src/appwrite.js":
/*!*************************!*\
  !*** ./src/appwrite.js ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var appwrite__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! appwrite */ \"./node_modules/appwrite/dist/esm/sdk.js\");\n\nconsole.log(appwrite__WEBPACK_IMPORTED_MODULE_0__.Appwrite)\nconst sdk = new appwrite__WEBPACK_IMPORTED_MODULE_0__.Appwrite();\n\nsdk\n    .setEndpoint('http://localhost:333/v1') // Your API Endpoint\n    .setProject('61dcf9e940213') // Your project ID\n;\n\n// let promise = sdk.database.createDocument('61de490873d42', '111', {'camera_name':'Canon 600', 'movie_name': 'Summer 500'});\n// let promise = sdk.database.listDocuments('61de490873d42');\n// let promise = sdk.database.deleteDocument('61de490873d42', '61de4cb14a89f');\n\n// let promise = sdk.account.createAnonymousSession();\n// let promise = sdk.account.createSession('me@example.com', 'password'); //讓使用者登入\n// let promise = sdk.account.get(); //取得當前登入者的帳號資料\n// let promise = sdk.account.getSessions(); //取得當前登入者的session\n// let promise = sdk.account.deleteSession('61de5255134be'); //刪除當前登入者的 session = 登出\nlet promise\nlet btn = document.querySelector(\"#btn\")\nbtn.addEventListener(\"click\", ()=>{\n    console.log(\"i'm clicked\")\n    promise = sdk.database.listDocuments('61de71bd1e52f');\n    // promise = sdk.database.getDocument('61de71bd1e52f', '61de71f08cdab');\n    promise.then(function (response) {\n        console.log(response); // Success\n    }, function (error) {\n        console.log(error); // Failure\n    });\n})\n\n\n//# sourceURL=webpack://appwrite/./src/appwrite.js?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _appwrite__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./appwrite */ \"./src/appwrite.js\");\n\n\n//# sourceURL=webpack://appwrite/./src/index.js?");

/***/ }),

/***/ "./node_modules/appwrite/dist/esm/sdk.js":
/*!***********************************************!*\
  !*** ./node_modules/appwrite/dist/esm/sdk.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Appwrite\": () => (/* binding */ Appwrite),\n/* harmony export */   \"Query\": () => (/* binding */ Query)\n/* harmony export */ });\n/* harmony import */ var isomorphic_form_data__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! isomorphic-form-data */ \"./node_modules/isomorphic-form-data/lib/browser.js\");\n/* harmony import */ var cross_fetch__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! cross-fetch */ \"./node_modules/cross-fetch/dist/browser-ponyfill.js\");\n\n\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n\r\nfunction __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\n\nclass AppwriteException extends Error {\n    constructor(message, code = 0, response = '') {\n        super(message);\n        this.name = 'AppwriteException';\n        this.message = message;\n        this.code = code;\n        this.response = response;\n    }\n}\nclass Appwrite {\n    constructor() {\n        this.config = {\n            endpoint: 'https://HOSTNAME/v1',\n            endpointRealtime: '',\n            project: '',\n            jwt: '',\n            locale: '',\n        };\n        this.headers = {\n            'x-sdk-version': 'appwrite:web:6.0.1',\n            'X-Appwrite-Response-Format': '0.12.0',\n        };\n        this.realtime = {\n            socket: undefined,\n            timeout: undefined,\n            url: '',\n            channels: new Set(),\n            subscriptions: new Map(),\n            subscriptionsCounter: 0,\n            reconnect: true,\n            reconnectAttempts: 0,\n            lastMessage: undefined,\n            connect: () => {\n                clearTimeout(this.realtime.timeout);\n                this.realtime.timeout = window === null || window === void 0 ? void 0 : window.setTimeout(() => {\n                    this.realtime.createSocket();\n                }, 50);\n            },\n            getTimeout: () => {\n                switch (true) {\n                    case this.realtime.reconnectAttempts < 5:\n                        return 1000;\n                    case this.realtime.reconnectAttempts < 15:\n                        return 5000;\n                    case this.realtime.reconnectAttempts < 100:\n                        return 10000;\n                    default:\n                        return 60000;\n                }\n            },\n            createSocket: () => {\n                var _a, _b;\n                if (this.realtime.channels.size < 1)\n                    return;\n                const channels = new URLSearchParams();\n                channels.set('project', this.config.project);\n                this.realtime.channels.forEach(channel => {\n                    channels.append('channels[]', channel);\n                });\n                const url = this.config.endpointRealtime + '/realtime?' + channels.toString();\n                if (url !== this.realtime.url || // Check if URL is present\n                    !this.realtime.socket || // Check if WebSocket has not been created\n                    ((_a = this.realtime.socket) === null || _a === void 0 ? void 0 : _a.readyState) > WebSocket.OPEN // Check if WebSocket is CLOSING (3) or CLOSED (4)\n                ) {\n                    if (this.realtime.socket &&\n                        ((_b = this.realtime.socket) === null || _b === void 0 ? void 0 : _b.readyState) < WebSocket.CLOSING // Close WebSocket if it is CONNECTING (0) or OPEN (1)\n                    ) {\n                        this.realtime.reconnect = false;\n                        this.realtime.socket.close();\n                    }\n                    this.realtime.url = url;\n                    this.realtime.socket = new WebSocket(url);\n                    this.realtime.socket.addEventListener('message', this.realtime.onMessage);\n                    this.realtime.socket.addEventListener('open', _event => {\n                        this.realtime.reconnectAttempts = 0;\n                    });\n                    this.realtime.socket.addEventListener('close', event => {\n                        var _a, _b, _c;\n                        if (!this.realtime.reconnect ||\n                            (((_b = (_a = this.realtime) === null || _a === void 0 ? void 0 : _a.lastMessage) === null || _b === void 0 ? void 0 : _b.type) === 'error' && // Check if last message was of type error\n                                ((_c = this.realtime) === null || _c === void 0 ? void 0 : _c.lastMessage.data).code === 1008 // Check for policy violation 1008\n                            )) {\n                            this.realtime.reconnect = true;\n                            return;\n                        }\n                        const timeout = this.realtime.getTimeout();\n                        console.error(`Realtime got disconnected. Reconnect will be attempted in ${timeout / 1000} seconds.`, event.reason);\n                        setTimeout(() => {\n                            this.realtime.reconnectAttempts++;\n                            this.realtime.createSocket();\n                        }, timeout);\n                    });\n                }\n            },\n            onMessage: (event) => {\n                var _a, _b;\n                try {\n                    const message = JSON.parse(event.data);\n                    this.realtime.lastMessage = message;\n                    switch (message.type) {\n                        case 'connected':\n                            const cookie = JSON.parse((_a = window.localStorage.getItem('cookieFallback')) !== null && _a !== void 0 ? _a : '{}');\n                            const session = cookie === null || cookie === void 0 ? void 0 : cookie[`a_session_${this.config.project}`];\n                            const messageData = message.data;\n                            if (session && !messageData.user) {\n                                (_b = this.realtime.socket) === null || _b === void 0 ? void 0 : _b.send(JSON.stringify({\n                                    type: 'authentication',\n                                    data: {\n                                        session\n                                    }\n                                }));\n                            }\n                            break;\n                        case 'event':\n                            let data = message.data;\n                            if (data === null || data === void 0 ? void 0 : data.channels) {\n                                const isSubscribed = data.channels.some(channel => this.realtime.channels.has(channel));\n                                if (!isSubscribed)\n                                    return;\n                                this.realtime.subscriptions.forEach(subscription => {\n                                    if (data.channels.some(channel => subscription.channels.includes(channel))) {\n                                        setTimeout(() => subscription.callback(data));\n                                    }\n                                });\n                            }\n                            break;\n                        case 'error':\n                            throw message.data;\n                        default:\n                            break;\n                    }\n                }\n                catch (e) {\n                    console.error(e);\n                }\n            },\n            cleanUp: channels => {\n                this.realtime.channels.forEach(channel => {\n                    if (channels.includes(channel)) {\n                        let found = Array.from(this.realtime.subscriptions).some(([_key, subscription]) => {\n                            return subscription.channels.includes(channel);\n                        });\n                        if (!found) {\n                            this.realtime.channels.delete(channel);\n                        }\n                    }\n                });\n            }\n        };\n        this.account = {\n            /**\n             * Get Account\n             *\n             * Get currently logged in user data as JSON object.\n             *\n             * @throws {AppwriteException}\n             * @returns {Promise}\n             */\n            get: () => __awaiter(this, void 0, void 0, function* () {\n                let path = '/account';\n                let payload = {};\n                const uri = new URL(this.config.endpoint + path);\n                return yield this.call('get', uri, {\n                    'content-type': 'application/json',\n                }, payload);\n            }),\n            /**\n             * Create Account\n             *\n             * Use this endpoint to allow a new user to register a new account in your\n             * project. After the user registration completes successfully, you can use\n             * the [/account/verfication](/docs/client/account#accountCreateVerification)\n             * route to start verifying the user email address. To allow the new user to\n             * login to their new account, you need to create a new [account\n             * session](/docs/client/account#accountCreateSession).\n             *\n             * @param {string} userId\n             * @param {string} email\n             * @param {string} password\n             * @param {string} name\n             * @throws {AppwriteException}\n             * @returns {Promise}\n             */\n            create: (userId, email, password, name) => __awaiter(this, void 0, void 0, function* () {\n                if (typeof userId === 'undefined') {\n                    throw new AppwriteException('Missing required parameter: \"userId\"');\n                }\n                if (typeof email === 'undefined') {\n                    throw new AppwriteException('Missing required parameter: \"email\"');\n                }\n                if (typeof password === 'undefined') {\n                    throw new AppwriteException('Missing required parameter: \"password\"');\n                }\n                let path = '/account';\n                let payload = {};\n                if (typeof userId !== 'undefined') {\n                    payload['userId'] = userId;\n                }\n                if (typeof email !== 'undefined') {\n                    payload['email'] = email;\n                }\n                if (typeof password !== 'undefined') {\n                    payload['password'] = password;\n                }\n                if (typeof name !== 'undefined') {\n                    payload['name'] = name;\n                }\n                const uri = new URL(this.config.endpoint + path);\n                return yield this.call('post', uri, {\n                    'content-type': 'application/json',\n                }, payload);\n            }),\n            /**\n             * Delete Account\n             *\n             * Delete a currently logged in user account. Behind the scene, the user\n             * record is not deleted but permanently blocked from any access. This is done\n             * to avoid deleted accounts being overtaken by new users with the same email\n             * address. Any user-related resources like documents or storage files should\n             * be deleted separately.\n             *\n             * @throws {AppwriteException}\n             * @returns {Promise}\n             */\n            delete: () => __awaiter(this, void 0, void 0, function* () {\n                let path = '/account';\n                let payload = {};\n                const uri = new URL(this.config.endpoint + path);\n                return yield this.call('delete', uri, {\n                    'content-type': 'application/json',\n                }, payload);\n            }),\n            /**\n             * Update Account Email\n             *\n             * Update currently logged in user account email address. After changing user\n             * address, the user confirmation status will get reset. A new confirmation\n             * email is not sent automatically however you can use the send confirmation\n             * email endpoint again to send the confirmation email. For security measures,\n             * user password is required to complete this request.\n             * This endpoint can also be used to convert an anonymous account to a normal\n             * one, by passing an email address and a new password.\n             *\n             *\n             * @param {string} email\n             * @param {string} password\n             * @throws {AppwriteException}\n             * @returns {Promise}\n             */\n            updateEmail: (email, password) => __awaiter(this, void 0, void 0, function* () {\n                if (typeof email === 'undefined') {\n                    throw new AppwriteException('Missing required parameter: \"email\"');\n                }\n                if (typeof password === 'undefined') {\n                    throw new AppwriteException('Missing required parameter: \"password\"');\n                }\n                let path = '/account/email';\n                let payload = {};\n                if (typeof email !== 'undefined') {\n                    payload['email'] = email;\n                }\n                if (typeof password !== 'undefined') {\n                    payload['password'] = password;\n                }\n                const uri = new URL(this.config.endpoint + path);\n                return yield this.call('patch', uri, {\n                    'content-type': 'application/json',\n                }, payload);\n            }),\n            /**\n             * Create Account JWT\n             *\n             * Use this endpoint to create a JSON Web Token. You can use the resulting JWT\n             * to authenticate on behalf of the current user when working with the\n             * Appwrite server-side API and SDKs. The JWT secret is valid for 15 minutes\n             * from its creation and will be invalid if the user will logout in that time\n             * frame.\n             *\n             * @throws {AppwriteException}\n             * @returns {Promise}\n             */\n            createJWT: () => __awaiter(this, void 0, void 0, function* () {\n                let path = '/account/jwt';\n                let payload = {};\n                const uri = new URL(this.config.endpoint + path);\n                return yield this.call('post', uri, {\n                    'content-type': 'application/json',\n                }, payload);\n            }),\n            /**\n             * Get Account Logs\n             *\n             * Get currently logged in user list of latest security activity logs. Each\n             * log returns user IP address, location and date and time of log.\n             *\n             * @param {number} limit\n             * @param {number} offset\n             * @throws {AppwriteException}\n             * @returns {Promise}\n             */\n            getLogs: (limit, offset) => __awaiter(this, void 0, void 0, function* () {\n                let path = '/account/logs';\n                let payload = {};\n                if (typeof limit !== 'undefined') {\n                    payload['limit'] = limit;\n                }\n                if (typeof offset !== 'undefined') {\n                    payload['offset'] = offset;\n                }\n                const uri = new URL(this.config.endpoint + path);\n                return yield this.call('get', uri, {\n                    'content-type': 'application/json',\n                }, payload);\n            }),\n            /**\n             * Update Account Name\n             *\n             * Update currently logged in user account name.\n             *\n             * @param {string} name\n             * @throws {AppwriteException}\n             * @returns {Promise}\n             */\n            updateName: (name) => __awaiter(this, void 0, void 0, function* () {\n                if (typeof name === 'undefined') {\n                    throw new AppwriteException('Missing required parameter: \"name\"');\n                }\n                let path = '/account/name';\n                let payload = {};\n                if (typeof name !== 'undefined') {\n                    payload['name'] = name;\n                }\n                const uri = new URL(this.config.endpoint + path);\n                return yield this.call('patch', uri, {\n                    'content-type': 'application/json',\n                }, payload);\n            }),\n            /**\n             * Update Account Password\n             *\n             * Update currently logged in user password. For validation, user is required\n             * to pass in the new password, and the old password. For users created with\n             * OAuth and Team Invites, oldPassword is optional.\n             *\n             * @param {string} password\n             * @param {string} oldPassword\n             * @throws {AppwriteException}\n             * @returns {Promise}\n             */\n            updatePassword: (password, oldPassword) => __awaiter(this, void 0, void 0, function* () {\n                if (typeof password === 'undefined') {\n                    throw new AppwriteException('Missing required parameter: \"password\"');\n                }\n                let path = '/account/password';\n                let payload = {};\n                if (typeof password !== 'undefined') {\n                    payload['password'] = password;\n                }\n                if (typeof oldPassword !== 'undefined') {\n                    payload['oldPassword'] = oldPassword;\n                }\n                const uri = new URL(this.config.endpoint + path);\n                return yield this.call('patch', uri, {\n                    'content-type': 'application/json',\n                }, payload);\n            }),\n            /**\n             * Get Account Preferences\n             *\n             * Get currently logged in user preferences as a key-value object.\n             *\n             * @throws {AppwriteException}\n             * @returns {Promise}\n             */\n            getPrefs: () => __awaiter(this, void 0, void 0, function* () {\n                let path = '/account/prefs';\n                let payload = {};\n                const uri = new URL(this.config.endpoint + path);\n                return yield this.call('get', uri, {\n                    'content-type': 'application/json',\n                }, payload);\n            }),\n            /**\n             * Update Account Preferences\n             *\n             * Update currently logged in user account preferences. You can pass only the\n             * specific settings you wish to update.\n             *\n             * @param {object} prefs\n             * @throws {AppwriteException}\n             * @returns {Promise}\n             */\n            updatePrefs: (prefs) => __awaiter(this, void 0, void 0, function* () {\n                if (typeof prefs === 'undefined') {\n                    throw new AppwriteException('Missing required parameter: \"prefs\"');\n                }\n                let path = '/account/prefs';\n                let payload = {};\n                if (typeof prefs !== 'undefined') {\n                    payload['prefs'] = prefs;\n                }\n                const uri = new URL(this.config.endpoint + path);\n                return yield this.call('patch', uri, {\n                    'content-type': 'application/json',\n                }, payload);\n            }),\n            /**\n             * Create Password Recovery\n             *\n             * Sends the user an email with a temporary secret key for password reset.\n             * When the user clicks the confirmation link he is redirected back to your\n             * app password reset URL with the secret key and email address values\n             * attached to the URL query string. Use the query string params to submit a\n             * request to the [PUT\n             * /account/recovery](/docs/client/account#accountUpdateRecovery) endpoint to\n             * complete the process. The verification link sent to the user's email\n             * address is valid for 1 hour.\n             *\n             * @param {string} email\n             * @param {string} url\n             * @throws {AppwriteException}\n             * @returns {Promise}\n             */\n            createRecovery: (email, url) => __awaiter(this, void 0, void 0, function* () {\n                if (typeof email === 'undefined') {\n                    throw new AppwriteException('Missing required parameter: \"email\"');\n                }\n                if (typeof url === 'undefined') {\n                    throw new AppwriteException('Missing required parameter: \"url\"');\n                }\n                let path = '/account/recovery';\n                let payload = {};\n                if (typeof email !== 'undefined') {\n                    payload['email'] = email;\n                }\n                if (typeof url !== 'undefined') {\n                    payload['url'] = url;\n                }\n                const uri = new URL(this.config.endpoint + path);\n                return yield this.call('post', uri, {\n                    'content-type': 'application/json',\n                }, payload);\n            }),\n            /**\n             * Create Password Recovery (confirmation)\n             *\n             * Use this endpoint to complete the user account password reset. Both the\n             * **userId** and **secret** arguments will be passed as query parameters to\n             * the redirect URL you have provided when sending your request to the [POST\n             * /account/recovery](/docs/client/account#accountCreateRecovery) endpoint.\n             *\n             * Please note that in order to avoid a [Redirect\n             * Attack](https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.md)\n             * the only valid redirect URLs are the ones from domains you have set when\n             * adding your platforms in the console interface.\n             *\n             * @param {string} userId\n             * @param {string} secret\n             * @param {string} password\n             * @param {string} passwordAgain\n             * @throws {AppwriteException}\n             * @returns {Promise}\n             */\n            updateRecovery: (userId, secret, password, passwordAgain) => __awaiter(this, void 0, void 0, function* () {\n                if (typeof userId === 'undefined') {\n                    throw new AppwriteException('Missing required parameter: \"userId\"');\n                }\n                if (typeof secret === 'undefined') {\n                    throw new AppwriteException('Missing required parameter: \"secret\"');\n                }\n                if (typeof password === 'undefined') {\n                    throw new AppwriteException('Missing required parameter: \"password\"');\n                }\n                if (typeof passwordAgain === 'undefined') {\n                    throw new AppwriteException('Missing required parameter: \"passwordAgain\"');\n                }\n                let path = '/account/recovery';\n                let payload = {};\n                if (typeof userId !== 'undefined') {\n                    payload['userId'] = userId;\n                }\n                if (typeof secret !== 'undefined') {\n                    payload['secret'] = secret;\n                }\n                if (typeof password !== 'undefined') {\n                    payload['password'] = password;\n                }\n                if (typeof passwordAgain !== 'undefined') {\n                    payload['passwordAgain'] = passwordAgain;\n                }\n                const uri = new URL(this.config.endpoint + path);\n                return yield this.call('put', uri, {\n                    'content-type': 'application/json',\n                }, payload);\n            }),\n            /**\n             * Get Account Sessions\n             *\n             * Get currently logged in user list of active sessions across different\n             * devices.\n             *\n             * @throws {AppwriteException}\n             * @returns {Promise}\n             */\n            getSessions: () => __awaiter(this, void 0, void 0, function* () {\n                let path = '/account/sessions';\n                let payload = {};\n                const uri = new URL(this.config.endpoint + path);\n                return yield this.call('get', uri, {\n                    'content-type': 'application/json',\n                }, payload);\n            }),\n            /**\n             * Create Account Session\n             *\n             * Allow the user to login into their account by providing a valid email and\n             * password combination. This route will create a new session for the user.\n             *\n             * @param {string} email\n             * @param {string} password\n             * @throws {AppwriteException}\n             * @returns {Promise}\n             */\n            createSession: (email, password) => __awaiter(this, void 0, void 0, function* () {\n                if (typeof email === 'undefined') {\n                    throw new AppwriteException('Missing required parameter: \"email\"');\n                }\n                if (typeof password === 'undefined') {\n                    throw new AppwriteException('Missing required parameter: \"password\"');\n                }\n                let path = '/account/sessions';\n                let payload = {};\n                if (typeof email !== 'undefined') {\n                    payload['email'] = email;\n                }\n                if (typeof password !== 'undefined') {\n                    payload['password'] = password;\n                }\n                const uri = new URL(this.config.endpoint + path);\n                return yield this.call('post', uri, {\n                    'content-type': 'application/json',\n                }, payload);\n            }),\n            /**\n             * Delete All Account Sessions\n             *\n             * Delete all sessions from the user account and remove any sessions cookies\n             * from the end client.\n             *\n             * @throws {AppwriteException}\n             * @returns {Promise}\n             */\n            deleteSessions: () => __awaiter(this, void 0, void 0, function* () {\n                let path = '/account/sessions';\n                let payload = {};\n                const uri = new URL(this.config.endpoint + path);\n                return yield this.call('delete', uri, {\n                    'content-type': 'application/json',\n                }, payload);\n            }),\n            /**\n             * Create Anonymous Session\n             *\n             * Use this endpoint to allow a new user to register an anonymous account in\n             * your project. This route will also create a new session for the user. To\n             * allow the new user to convert an anonymous account to a normal account, you\n             * need to update its [email and\n             * password](/docs/client/account#accountUpdateEmail) or create an [OAuth2\n             * session](/docs/client/account#accountCreateOAuth2Session).\n             *\n             * @throws {AppwriteException}\n             * @returns {Promise}\n             */\n            createAnonymousSession: () => __awaiter(this, void 0, void 0, function* () {\n                let path = '/account/sessions/anonymous';\n                let payload = {};\n                const uri = new URL(this.config.endpoint + path);\n                return yield this.call('post', uri, {\n                    'content-type': 'application/json',\n                }, payload);\n            }),\n            /**\n             * Create Magic URL session\n             *\n             * Sends the user an email with a secret key for creating a session. When the\n             * user clicks the link in the email, the user is redirected back to the URL\n             * you provided with the secret key and userId values attached to the URL\n             * query string. Use the query string parameters to submit a request to the\n             * [PUT\n             * /account/sessions/magic-url](/docs/client/account#accountUpdateMagicURLSession)\n             * endpoint to complete the login process. The link sent to the user's email\n             * address is valid for 1 hour. If you are on a mobile device you can leave\n             * the URL parameter empty, so that the login completion will be handled by\n             * your Appwrite instance by default.\n             *\n             * @param {string} userId\n             * @param {string} email\n             * @param {string} url\n             * @throws {AppwriteException}\n             * @returns {Promise}\n             */\n            createMagicURLSession: (userId, email, url) => __awaiter(this, void 0, void 0, function* () {\n                if (typeof userId === 'undefined') {\n                    throw new AppwriteException('Missing required parameter: \"userId\"');\n                }\n                if (typeof email === 'undefined') {\n                    throw new AppwriteException('Missing required parameter: \"email\"');\n                }\n                let path = '/account/sessions/magic-url';\n                let payload = {};\n                if (typeof userId !== 'undefined') {\n                    payload['userId'] = userId;\n                }\n                if (typeof email !== 'undefined') {\n                    payload['email'] = email;\n                }\n                if (typeof url !== 'undefined') {\n                    payload['url'] = url;\n                }\n                const uri = new URL(this.config.endpoint + path);\n                return yield this.call('post', uri, {\n                    'content-type': 'application/json',\n                }, payload);\n            }),\n            /**\n             * Create Magic URL session (confirmation)\n             *\n             * Use this endpoint to complete creating the session with the Magic URL. Both\n             * the **userId** and **secret** arguments will be passed as query parameters\n             * to the redirect URL you have provided when sending your request to the\n             * [POST\n             * /account/sessions/magic-url](/docs/client/account#accountCreateMagicURLSession)\n             * endpoint.\n             *\n             * Please note that in order to avoid a [Redirect\n             * Attack](https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.md)\n             * the only valid redirect URLs are the ones from domains you have set when\n             * adding your platforms in the console interface.\n             *\n             * @param {string} userId\n             * @param {string} secret\n             * @throws {AppwriteException}\n             * @returns {Promise}\n             */\n            updateMagicURLSession: (userId, secret) => __awaiter(this, void 0, void 0, function* () {\n                if (typeof userId === 'undefined') {\n                    throw new AppwriteException('Missing required parameter: \"userId\"');\n                }\n                if (typeof secret === 'undefined') {\n                    throw new AppwriteException('Missing required parameter: \"secret\"');\n                }\n                let path = '/account/sessions/magic-url';\n                let payload = {};\n                if (typeof userId !== 'undefined') {\n                    payload['userId'] = userId;\n                }\n                if (typeof secret !== 'undefined') {\n                    payload['secret'] = secret;\n                }\n                const uri = new URL(this.config.endpoint + path);\n                return yield this.call('put', uri, {\n                    'content-type': 'application/json',\n                }, payload);\n            }),\n            /**\n             * Create Account Session with OAuth2\n             *\n             * Allow the user to login to their account using the OAuth2 provider of their\n             * choice. Each OAuth2 provider should be enabled from the Appwrite console\n             * first. Use the success and failure arguments to provide a redirect URL's\n             * back to your app when login is completed.\n             *\n             * If there is already an active session, the new session will be attached to\n             * the logged-in account. If there are no active sessions, the server will\n             * attempt to look for a user with the same email address as the email\n             * received from the OAuth2 provider and attach the new session to the\n             * existing user. If no matching user is found - the server will create a new\n             * user..\n             *\n             *\n             * @param {string} provider\n             * @param {string} success\n             * @param {string} failure\n             * @param {string[]} scopes\n             * @throws {AppwriteException}\n             * @returns {void|string}\n             */\n            createOAuth2Session: (provider, success, failure, scopes) => {\n                if (typeof provider === 'undefined') {\n                    throw new AppwriteException('Missing required parameter: \"provider\"');\n                }\n                let path = '/account/sessions/oauth2/{provider}'.replace('{provider}', provider);\n                let payload = {};\n                if (typeof success !== 'undefined') {\n                    payload['success'] = success;\n                }\n                if (typeof failure !== 'undefined') {\n                    payload['failure'] = failure;\n                }\n                if (typeof scopes !== 'undefined') {\n                    payload['scopes'] = scopes;\n                }\n                const uri = new URL(this.config.endpoint + path);\n                payload['project'] = this.config.project;\n                for (const [key, value] of Object.entries(this.flatten(payload))) {\n                    uri.searchParams.append(key, value);\n                }\n                if (typeof window !== 'undefined' && (window === null || window === void 0 ? void 0 : window.location)) {\n                    window.location.href = uri.toString();\n                }\n                else {\n                    return uri;\n                }\n            },\n            /**\n             * Get Session By ID\n             *\n             * Use this endpoint to get a logged in user's session using a Session ID.\n             * Inputting 'current' will return the current session being used.\n             *\n             * @param {string} sessionId\n             * @throws {AppwriteException}\n             * @returns {Promise}\n             */\n            getSession: (sessionId) => __awaiter(this, void 0, void 0, function* () {\n                if (typeof sessionId === 'undefined') {\n                    throw new AppwriteException('Missing required parameter: \"sessionId\"');\n                }\n                let path = '/account/sessions/{sessionId}'.replace('{sessionId}', sessionId);\n                let payload = {};\n                const uri = new URL(this.config.endpoint + path);\n                return yield this.call('get', uri, {\n                    'content-type': 'application/json',\n                }, payload);\n            }),\n            /**\n             * Delete Account Session\n             *\n             * Use this endpoint to log out the currently logged in user from all their\n             * account sessions across all of their different devices. When using the\n             * option id argument, only the session unique ID provider will be deleted.\n             *\n             * @param {string} sessionId\n             * @throws {AppwriteException}\n             * @returns {Promise}\n             */\n            deleteSession: (sessionId) => __awaiter(this, void 0, void 0, function* () {\n                if (typeof sessionId === 'undefined') {\n                    throw new AppwriteException('Missing required parameter: \"sessionId\"');\n                }\n                let path = '/account/sessions/{sessionId}'.replace('{sessionId}', sessionId);\n                let payload = {};\n                const uri = new URL(this.config.endpoint + path);\n                return yield this.call('delete', uri, {\n                    'content-type': 'application/json',\n                }, payload);\n            }),\n            /**\n             * Create Email Verification\n             *\n             * Use this endpoint to send a verification message to your user email address\n             * to confirm they are the valid owners of that address. Both the **userId**\n             * and **secret** arguments will be passed as query parameters to the URL you\n             * have provided to be attached to the verification email. The provided URL\n             * should redirect the user back to your app and allow you to complete the\n             * verification process by verifying both the **userId** and **secret**\n             * parameters. Learn more about how to [complete the verification\n             * process](/docs/client/account#accountUpdateVerification). The verification\n             * link sent to the user's email address is valid for 7 days.\n             *\n             * Please note that in order to avoid a [Redirect\n             * Attack](https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.md),\n             * the only valid redirect URLs are the ones from domains you have set when\n             * adding your platforms in the console interface.\n             *\n             *\n             * @param {string} url\n             * @throws {AppwriteException}\n             * @returns {Promise}\n             */\n            createVerification: (url) => __awaiter(this, void 0, void 0, function* () {\n                if (typeof url === 'undefined') {\n                    throw new AppwriteException('Missing required parameter: \"url\"');\n                }\n                let path = '/account/verification';\n                let payload = {};\n                if (typeof url !== 'undefined') {\n                    payload['url'] = url;\n                }\n                const uri = new URL(this.config.endpoint + path);\n                return yield this.call('post', uri, {\n                    'content-type': 'application/json',\n                }, payload);\n            }),\n            /**\n             * Create Email Verification (confirmation)\n             *\n             * Use this endpoint to complete the user email verification process. Use both\n             * the **userId** and **secret** parameters that were attached to your app URL\n             * to verify the user email ownership. If confirmed this route will return a\n             * 200 status code.\n             *\n             * @param {string} userId\n             * @param {string} secret\n             * @throws {AppwriteException}\n             * @returns {Promise}\n             */\n            updateVerification: (userId, secret) => __awaiter(this, void 0, void 0, function* () {\n                if (typeof userId === 'undefined') {\n                    throw new AppwriteException('Missing required parameter: \"userId\"');\n                }\n                if (typeof secret === 'undefined') {\n                    throw new AppwriteException('Missing required parameter: \"secret\"');\n                }\n                let path = '/account/verification';\n                let payload = {};\n                if (typeof userId !== 'undefined') {\n                    payload['userId'] = userId;\n                }\n                if (typeof secret !== 'undefined') {\n                    payload['secret'] = secret;\n                }\n                const uri = new URL(this.config.endpoint + path);\n                return yield this.call('put', uri, {\n                    'content-type': 'application/json',\n                }, payload);\n            })\n        };\n        this.avatars = {\n            /**\n             * Get Browser Icon\n             *\n             * You can use this endpoint to show different browser icons to your users.\n             * The code argument receives the browser code as it appears in your user\n             * /account/sessions endpoint. Use width, height and quality arguments to\n             * change the output settings.\n             *\n             * @param {string} code\n             * @param {number} width\n             * @param {number} height\n             * @param {number} quality\n             * @throws {AppwriteException}\n             * @returns {URL}\n             */\n            getBrowser: (code, width, height, quality) => {\n                if (typeof code === 'undefined') {\n                    throw new AppwriteException('Missing required parameter: \"code\"');\n                }\n                let path = '/avatars/browsers/{code}'.replace('{code}', code);\n                let payload = {};\n                if (typeof width !== 'undefined') {\n                    payload['width'] = width;\n                }\n                if (typeof height !== 'undefined') {\n                    payload['height'] = height;\n                }\n                if (typeof quality !== 'undefined') {\n                    payload['quality'] = quality;\n                }\n                const uri = new URL(this.config.endpoint + path);\n                payload['project'] = this.config.project;\n                for (const [key, value] of Object.entries(this.flatten(payload))) {\n                    uri.searchParams.append(key, value);\n                }\n                return uri;\n            },\n            /**\n             * Get Credit Card Icon\n             *\n             * The credit card endpoint will return you the icon of the credit card\n             * provider you need. Use width, height and quality arguments to change the\n             * output settings.\n             *\n             * @param {string} code\n             * @param {number} width\n             * @param {number} height\n             * @param {number} quality\n             * @throws {AppwriteException}\n             * @returns {URL}\n             */\n            getCreditCard: (code, width, height, quality) => {\n                if (typeof code === 'undefined') {\n                    throw new AppwriteException('Missing required parameter: \"code\"');\n                }\n                let path = '/avatars/credit-cards/{code}'.replace('{code}', code);\n                let payload = {};\n                if (typeof width !== 'undefined') {\n                    payload['width'] = width;\n                }\n                if (typeof height !== 'undefined') {\n                    payload['height'] = height;\n                }\n                if (typeof quality !== 'undefined') {\n                    payload['quality'] = quality;\n                }\n                const uri = new URL(this.config.endpoint + path);\n                payload['project'] = this.config.project;\n                for (const [key, value] of Object.entries(this.flatten(payload))) {\n                    uri.searchParams.append(key, value);\n                }\n                return uri;\n            },\n            /**\n             * Get Favicon\n             *\n             * Use this endpoint to fetch the favorite icon (AKA favicon) of any remote\n             * website URL.\n             *\n             *\n             * @param {string} url\n             * @throws {AppwriteException}\n             * @returns {URL}\n             */\n            getFavicon: (url) => {\n                if (typeof url === 'undefined') {\n                    throw new AppwriteException('Missing required parameter: \"url\"');\n                }\n                let path = '/avatars/favicon';\n                let payload = {};\n                if (typeof url !== 'undefined') {\n                    payload['url'] = url;\n                }\n                const uri = new URL(this.config.endpoint + path);\n                payload['project'] = this.config.project;\n                for (const [key, value] of Object.entries(this.flatten(payload))) {\n                    uri.searchParams.append(key, value);\n                }\n                return uri;\n            },\n            /**\n             * Get Country Flag\n             *\n             * You can use this endpoint to show different country flags icons to your\n             * users. The code argument receives the 2 letter country code. Use width,\n             * height and quality arguments to change the output settings.\n             *\n             * @param {string} code\n             * @param {number} width\n             * @param {number} height\n             * @param {number} quality\n             * @throws {AppwriteException}\n             * @returns {URL}\n             */\n            getFlag: (code, width, height, quality) => {\n                if (typeof code === 'undefined') {\n                    throw new AppwriteException('Missing required parameter: \"code\"');\n                }\n                let path = '/avatars/flags/{code}'.replace('{code}', code);\n                let payload = {};\n                if (typeof width !== 'undefined') {\n                    payload['width'] = width;\n                }\n                if (typeof height !== 'undefined') {\n                    payload['height'] = height;\n                }\n                if (typeof quality !== 'undefined') {\n                    payload['quality'] = quality;\n                }\n                const uri = new URL(this.config.endpoint + path);\n                payload['project'] = this.config.project;\n                for (const [key, value] of Object.entries(this.flatten(payload))) {\n                    uri.searchParams.append(key, value);\n                }\n                return uri;\n            },\n            /**\n             * Get Image from URL\n             *\n             * Use this endpoint to fetch a remote image URL and crop it to any image size\n             * you want. This endpoint is very useful if you need to crop and display\n             * remote images in your app or in case you want to make sure a 3rd party\n             * image is properly served using a TLS protocol.\n             *\n             * @param {string} url\n             * @param {number} width\n             * @param {number} height\n             * @throws {AppwriteException}\n             * @returns {URL}\n             */\n            getImage: (url, width, height) => {\n                if (typeof url === 'undefined') {\n                    throw new AppwriteException('Missing required parameter: \"url\"');\n                }\n                let path = '/avatars/image';\n                let payload = {};\n                if (typeof url !== 'undefined') {\n                    payload['url'] = url;\n                }\n                if (typeof width !== 'undefined') {\n                    payload['width'] = width;\n                }\n                if (typeof height !== 'undefined') {\n                    payload['height'] = height;\n                }\n                const uri = new URL(this.config.endpoint + path);\n                payload['project'] = this.config.project;\n                for (const [key, value] of Object.entries(this.flatten(payload))) {\n                    uri.searchParams.append(key, value);\n                }\n                return uri;\n            },\n            /**\n             * Get User Initials\n             *\n             * Use this endpoint to show your user initials avatar icon on your website or\n             * app. By default, this route will try to print your logged-in user name or\n             * email initials. You can also overwrite the user name if you pass the 'name'\n             * parameter. If no name is given and no user is logged, an empty avatar will\n             * be returned.\n             *\n             * You can use the color and background params to change the avatar colors. By\n             * default, a random theme will be selected. The random theme will persist for\n             * the user's initials when reloading the same theme will always return for\n             * the same initials.\n             *\n             * @param {string} name\n             * @param {number} width\n             * @param {number} height\n             * @param {string} color\n             * @param {string} background\n             * @throws {AppwriteException}\n             * @returns {URL}\n             */\n            getInitials: (name, width, height, color, background) => {\n                let path = '/avatars/initials';\n                let payload = {};\n                if (typeof name !== 'undefined') {\n                    payload['name'] = name;\n                }\n                if (typeof width !== 'undefined') {\n                    payload['width'] = width;\n                }\n                if (typeof height !== 'undefined') {\n                    payload['height'] = height;\n                }\n                if (typeof color !== 'undefined') {\n                    payload['color'] = color;\n                }\n                if (typeof background !== 'undefined') {\n                    payload['background'] = background;\n                }\n                const uri = new URL(this.config.endpoint + path);\n                payload['project'] = this.config.project;\n                for (const [key, value] of Object.entries(this.flatten(payload))) {\n                    uri.searchParams.append(key, value);\n                }\n                return uri;\n            },\n            /**\n             * Get QR Code\n             *\n             * Converts a given plain text to a QR code image. You can use the query\n             * parameters to change the size and style of the resulting image.\n             *\n             * @param {string} text\n             * @param {number} size\n             * @param {number} margin\n             * @param {boolean} download\n             * @throws {AppwriteException}\n             * @returns {URL}\n             */\n            getQR: (text, size, margin, download) => {\n                if (typeof text === 'undefined') {\n                    throw new AppwriteException('Missing required parameter: \"text\"');\n                }\n                let path = '/avatars/qr';\n                let payload = {};\n                if (typeof text !== 'undefined') {\n                    payload['text'] = text;\n                }\n                if (typeof size !== 'undefined') {\n                    payload['size'] = size;\n                }\n                if (typeof margin !== 'undefined') {\n                    payload['margin'] = margin;\n                }\n                if (typeof download !== 'undefined') {\n                    payload['download'] = download;\n                }\n                const uri = new URL(this.config.endpoint + path);\n                payload['project'] = this.config.project;\n                for (const [key, value] of Object.entries(this.flatten(payload))) {\n                    uri.searchParams.append(key, value);\n                }\n                return uri;\n            }\n        };\n        this.database = {\n            /**\n             * List Documents\n             *\n             * Get a list of all the user documents. You can use the query params to\n             * filter your results. On admin mode, this endpoint will return a list of all\n             * of the project's documents. [Learn more about different API\n             * modes](/docs/admin).\n             *\n             * @param {string} collectionId\n             * @param {string[]} queries\n             * @param {number} limit\n             * @param {number} offset\n             * @param {string} cursor\n             * @param {string} cursorDirection\n             * @param {string[]} orderAttributes\n             * @param {string[]} orderTypes\n             * @throws {AppwriteException}\n             * @returns {Promise}\n             */\n            listDocuments: (collectionId, queries, limit, offset, cursor, cursorDirection, orderAttributes, orderTypes) => __awaiter(this, void 0, void 0, function* () {\n                if (typeof collectionId === 'undefined') {\n                    throw new AppwriteException('Missing required parameter: \"collectionId\"');\n                }\n                let path = '/database/collections/{collectionId}/documents'.replace('{collectionId}', collectionId);\n                let payload = {};\n                if (typeof queries !== 'undefined') {\n                    payload['queries'] = queries;\n                }\n                if (typeof limit !== 'undefined') {\n                    payload['limit'] = limit;\n                }\n                if (typeof offset !== 'undefined') {\n                    payload['offset'] = offset;\n                }\n                if (typeof cursor !== 'undefined') {\n                    payload['cursor'] = cursor;\n                }\n                if (typeof cursorDirection !== 'undefined') {\n                    payload['cursorDirection'] = cursorDirection;\n                }\n                if (typeof orderAttributes !== 'undefined') {\n                    payload['orderAttributes'] = orderAttributes;\n                }\n                if (typeof orderTypes !== 'undefined') {\n                    payload['orderTypes'] = orderTypes;\n                }\n                const uri = new URL(this.config.endpoint + path);\n                return yield this.call('get', uri, {\n                    'content-type': 'application/json',\n                }, payload);\n            }),\n            /**\n             * Create Document\n             *\n             * Create a new Document. Before using this route, you should create a new\n             * collection resource using either a [server\n             * integration](/docs/server/database#databaseCreateCollection) API or\n             * directly from your database console.\n             *\n             * @param {string} collectionId\n             * @param {string} documentId\n             * @param {object} data\n             * @param {string[]} read\n             * @param {string[]} write\n             * @throws {AppwriteException}\n             * @returns {Promise}\n             */\n            createDocument: (collectionId, documentId, data, read, write) => __awaiter(this, void 0, void 0, function* () {\n                if (typeof collectionId === 'undefined') {\n                    throw new AppwriteException('Missing required parameter: \"collectionId\"');\n                }\n                if (typeof documentId === 'undefined') {\n                    throw new AppwriteException('Missing required parameter: \"documentId\"');\n                }\n                if (typeof data === 'undefined') {\n                    throw new AppwriteException('Missing required parameter: \"data\"');\n                }\n                let path = '/database/collections/{collectionId}/documents'.replace('{collectionId}', collectionId);\n                let payload = {};\n                if (typeof documentId !== 'undefined') {\n                    payload['documentId'] = documentId;\n                }\n                if (typeof data !== 'undefined') {\n                    payload['data'] = data;\n                }\n                if (typeof read !== 'undefined') {\n                    payload['read'] = read;\n                }\n                if (typeof write !== 'undefined') {\n                    payload['write'] = write;\n                }\n                const uri = new URL(this.config.endpoint + path);\n                return yield this.call('post', uri, {\n                    'content-type': 'application/json',\n                }, payload);\n            }),\n            /**\n             * Get Document\n             *\n             * Get a document by its unique ID. This endpoint response returns a JSON\n             * object with the document data.\n             *\n             * @param {string} collectionId\n             * @param {string} documentId\n             * @throws {AppwriteException}\n             * @returns {Promise}\n             */\n            getDocument: (collectionId, documentId) => __awaiter(this, void 0, void 0, function* () {\n                if (typeof collectionId === 'undefined') {\n                    throw new AppwriteException('Missing required parameter: \"collectionId\"');\n                }\n                if (typeof documentId === 'undefined') {\n                    throw new AppwriteException('Missing required parameter: \"documentId\"');\n                }\n                let path = '/database/collections/{collectionId}/documents/{documentId}'.replace('{collectionId}', collectionId).replace('{documentId}', documentId);\n                let payload = {};\n                const uri = new URL(this.config.endpoint + path);\n                return yield this.call('get', uri, {\n                    'content-type': 'application/json',\n                }, payload);\n            }),\n            /**\n             * Update Document\n             *\n             * Update a document by its unique ID. Using the patch method you can pass\n             * only specific fields that will get updated.\n             *\n             * @param {string} collectionId\n             * @param {string} documentId\n             * @param {object} data\n             * @param {string[]} read\n             * @param {string[]} write\n             * @throws {AppwriteException}\n             * @returns {Promise}\n             */\n            updateDocument: (collectionId, documentId, data, read, write) => __awaiter(this, void 0, void 0, function* () {\n                if (typeof collectionId === 'undefined') {\n                    throw new AppwriteException('Missing required parameter: \"collectionId\"');\n                }\n                if (typeof documentId === 'undefined') {\n                    throw new AppwriteException('Missing required parameter: \"documentId\"');\n                }\n                if (typeof data === 'undefined') {\n                    throw new AppwriteException('Missing required parameter: \"data\"');\n                }\n                let path = '/database/collections/{collectionId}/documents/{documentId}'.replace('{collectionId}', collectionId).replace('{documentId}', documentId);\n                let payload = {};\n                if (typeof data !== 'undefined') {\n                    payload['data'] = data;\n                }\n                if (typeof read !== 'undefined') {\n                    payload['read'] = read;\n                }\n                if (typeof write !== 'undefined') {\n                    payload['write'] = write;\n                }\n                const uri = new URL(this.config.endpoint + path);\n                return yield this.call('patch', uri, {\n                    'content-type': 'application/json',\n                }, payload);\n            }),\n            /**\n             * Delete Document\n             *\n             * Delete a document by its unique ID. This endpoint deletes only the parent\n             * documents, its attributes and relations to other documents. Child documents\n             * **will not** be deleted.\n             *\n             * @param {string} collectionId\n             * @param {string} documentId\n             * @throws {AppwriteException}\n             * @returns {Promise}\n             */\n            deleteDocument: (collectionId, documentId) => __awaiter(this, void 0, void 0, function* () {\n                if (typeof collectionId === 'undefined') {\n                    throw new AppwriteException('Missing required parameter: \"collectionId\"');\n                }\n                if (typeof documentId === 'undefined') {\n                    throw new AppwriteException('Missing required parameter: \"documentId\"');\n                }\n                let path = '/database/collections/{collectionId}/documents/{documentId}'.replace('{collectionId}', collectionId).replace('{documentId}', documentId);\n                let payload = {};\n                const uri = new URL(this.config.endpoint + path);\n                return yield this.call('delete', uri, {\n                    'content-type': 'application/json',\n                }, payload);\n            })\n        };\n        this.functions = {\n            /**\n             * List Executions\n             *\n             * Get a list of all the current user function execution logs. You can use the\n             * query params to filter your results. On admin mode, this endpoint will\n             * return a list of all of the project's executions. [Learn more about\n             * different API modes](/docs/admin).\n             *\n             * @param {string} functionId\n             * @param {number} limit\n             * @param {number} offset\n             * @param {string} search\n             * @param {string} cursor\n             * @param {string} cursorDirection\n             * @throws {AppwriteException}\n             * @returns {Promise}\n             */\n            listExecutions: (functionId, limit, offset, search, cursor, cursorDirection) => __awaiter(this, void 0, void 0, function* () {\n                if (typeof functionId === 'undefined') {\n                    throw new AppwriteException('Missing required parameter: \"functionId\"');\n                }\n                let path = '/functions/{functionId}/executions'.replace('{functionId}', functionId);\n                let payload = {};\n                if (typeof limit !== 'undefined') {\n                    payload['limit'] = limit;\n                }\n                if (typeof offset !== 'undefined') {\n                    payload['offset'] = offset;\n                }\n                if (typeof search !== 'undefined') {\n                    payload['search'] = search;\n                }\n                if (typeof cursor !== 'undefined') {\n                    payload['cursor'] = cursor;\n                }\n                if (typeof cursorDirection !== 'undefined') {\n                    payload['cursorDirection'] = cursorDirection;\n                }\n                const uri = new URL(this.config.endpoint + path);\n                return yield this.call('get', uri, {\n                    'content-type': 'application/json',\n                }, payload);\n            }),\n            /**\n             * Create Execution\n             *\n             * Trigger a function execution. The returned object will return you the\n             * current execution status. You can ping the `Get Execution` endpoint to get\n             * updates on the current execution status. Once this endpoint is called, your\n             * function execution process will start asynchronously.\n             *\n             * @param {string} functionId\n             * @param {string} data\n             * @throws {AppwriteException}\n             * @returns {Promise}\n             */\n            createExecution: (functionId, data) => __awaiter(this, void 0, void 0, function* () {\n                if (typeof functionId === 'undefined') {\n                    throw new AppwriteException('Missing required parameter: \"functionId\"');\n                }\n                let path = '/functions/{functionId}/executions'.replace('{functionId}', functionId);\n                let payload = {};\n                if (typeof data !== 'undefined') {\n                    payload['data'] = data;\n                }\n                const uri = new URL(this.config.endpoint + path);\n                return yield this.call('post', uri, {\n                    'content-type': 'application/json',\n                }, payload);\n            }),\n            /**\n             * Get Execution\n             *\n             * Get a function execution log by its unique ID.\n             *\n             * @param {string} functionId\n             * @param {string} executionId\n             * @throws {AppwriteException}\n             * @returns {Promise}\n             */\n            getExecution: (functionId, executionId) => __awaiter(this, void 0, void 0, function* () {\n                if (typeof functionId === 'undefined') {\n                    throw new AppwriteException('Missing required parameter: \"functionId\"');\n                }\n                if (typeof executionId === 'undefined') {\n                    throw new AppwriteException('Missing required parameter: \"executionId\"');\n                }\n                let path = '/functions/{functionId}/executions/{executionId}'.replace('{functionId}', functionId).replace('{executionId}', executionId);\n                let payload = {};\n                const uri = new URL(this.config.endpoint + path);\n                return yield this.call('get', uri, {\n                    'content-type': 'application/json',\n                }, payload);\n            })\n        };\n        this.locale = {\n            /**\n             * Get User Locale\n             *\n             * Get the current user location based on IP. Returns an object with user\n             * country code, country name, continent name, continent code, ip address and\n             * suggested currency. You can use the locale header to get the data in a\n             * supported language.\n             *\n             * ([IP Geolocation by DB-IP](https://db-ip.com))\n             *\n             * @throws {AppwriteException}\n             * @returns {Promise}\n             */\n            get: () => __awaiter(this, void 0, void 0, function* () {\n                let path = '/locale';\n                let payload = {};\n                const uri = new URL(this.config.endpoint + path);\n                return yield this.call('get', uri, {\n                    'content-type': 'application/json',\n                }, payload);\n            }),\n            /**\n             * List Continents\n             *\n             * List of all continents. You can use the locale header to get the data in a\n             * supported language.\n             *\n             * @throws {AppwriteException}\n             * @returns {Promise}\n             */\n            getContinents: () => __awaiter(this, void 0, void 0, function* () {\n                let path = '/locale/continents';\n                let payload = {};\n                const uri = new URL(this.config.endpoint + path);\n                return yield this.call('get', uri, {\n                    'content-type': 'application/json',\n                }, payload);\n            }),\n            /**\n             * List Countries\n             *\n             * List of all countries. You can use the locale header to get the data in a\n             * supported language.\n             *\n             * @throws {AppwriteException}\n             * @returns {Promise}\n             */\n            getCountries: () => __awaiter(this, void 0, void 0, function* () {\n                let path = '/locale/countries';\n                let payload = {};\n                const uri = new URL(this.config.endpoint + path);\n                return yield this.call('get', uri, {\n                    'content-type': 'application/json',\n                }, payload);\n            }),\n            /**\n             * List EU Countries\n             *\n             * List of all countries that are currently members of the EU. You can use the\n             * locale header to get the data in a supported language.\n             *\n             * @throws {AppwriteException}\n             * @returns {Promise}\n             */\n            getCountriesEU: () => __awaiter(this, void 0, void 0, function* () {\n                let path = '/locale/countries/eu';\n                let payload = {};\n                const uri = new URL(this.config.endpoint + path);\n                return yield this.call('get', uri, {\n                    'content-type': 'application/json',\n                }, payload);\n            }),\n            /**\n             * List Countries Phone Codes\n             *\n             * List of all countries phone codes. You can use the locale header to get the\n             * data in a supported language.\n             *\n             * @throws {AppwriteException}\n             * @returns {Promise}\n             */\n            getCountriesPhones: () => __awaiter(this, void 0, void 0, function* () {\n                let path = '/locale/countries/phones';\n                let payload = {};\n                const uri = new URL(this.config.endpoint + path);\n                return yield this.call('get', uri, {\n                    'content-type': 'application/json',\n                }, payload);\n            }),\n            /**\n             * List Currencies\n             *\n             * List of all currencies, including currency symbol, name, plural, and\n             * decimal digits for all major and minor currencies. You can use the locale\n             * header to get the data in a supported language.\n             *\n             * @throws {AppwriteException}\n             * @returns {Promise}\n             */\n            getCurrencies: () => __awaiter(this, void 0, void 0, function* () {\n                let path = '/locale/currencies';\n                let payload = {};\n                const uri = new URL(this.config.endpoint + path);\n                return yield this.call('get', uri, {\n                    'content-type': 'application/json',\n                }, payload);\n            }),\n            /**\n             * List Languages\n             *\n             * List of all languages classified by ISO 639-1 including 2-letter code, name\n             * in English, and name in the respective language.\n             *\n             * @throws {AppwriteException}\n             * @returns {Promise}\n             */\n            getLanguages: () => __awaiter(this, void 0, void 0, function* () {\n                let path = '/locale/languages';\n                let payload = {};\n                const uri = new URL(this.config.endpoint + path);\n                return yield this.call('get', uri, {\n                    'content-type': 'application/json',\n                }, payload);\n            })\n        };\n        this.storage = {\n            /**\n             * List Files\n             *\n             * Get a list of all the user files. You can use the query params to filter\n             * your results. On admin mode, this endpoint will return a list of all of the\n             * project's files. [Learn more about different API modes](/docs/admin).\n             *\n             * @param {string} search\n             * @param {number} limit\n             * @param {number} offset\n             * @param {string} cursor\n             * @param {string} cursorDirection\n             * @param {string} orderType\n             * @throws {AppwriteException}\n             * @returns {Promise}\n             */\n            listFiles: (search, limit, offset, cursor, cursorDirection, orderType) => __awaiter(this, void 0, void 0, function* () {\n                let path = '/storage/files';\n                let payload = {};\n                if (typeof search !== 'undefined') {\n                    payload['search'] = search;\n                }\n                if (typeof limit !== 'undefined') {\n                    payload['limit'] = limit;\n                }\n                if (typeof offset !== 'undefined') {\n                    payload['offset'] = offset;\n                }\n                if (typeof cursor !== 'undefined') {\n                    payload['cursor'] = cursor;\n                }\n                if (typeof cursorDirection !== 'undefined') {\n                    payload['cursorDirection'] = cursorDirection;\n                }\n                if (typeof orderType !== 'undefined') {\n                    payload['orderType'] = orderType;\n                }\n                const uri = new URL(this.config.endpoint + path);\n                return yield this.call('get', uri, {\n                    'content-type': 'application/json',\n                }, payload);\n            }),\n            /**\n             * Create File\n             *\n             * Create a new file. The user who creates the file will automatically be\n             * assigned to read and write access unless he has passed custom values for\n             * read and write arguments.\n             *\n             * @param {string} fileId\n             * @param {File} file\n             * @param {string[]} read\n             * @param {string[]} write\n             * @throws {AppwriteException}\n             * @returns {Promise}\n             */\n            createFile: (fileId, file, read, write) => __awaiter(this, void 0, void 0, function* () {\n                if (typeof fileId === 'undefined') {\n                    throw new AppwriteException('Missing required parameter: \"fileId\"');\n                }\n                if (typeof file === 'undefined') {\n                    throw new AppwriteException('Missing required parameter: \"file\"');\n                }\n                let path = '/storage/files';\n                let payload = {};\n                if (typeof fileId !== 'undefined') {\n                    payload['fileId'] = fileId;\n                }\n                if (typeof file !== 'undefined') {\n                    payload['file'] = file;\n                }\n                if (typeof read !== 'undefined') {\n                    payload['read'] = read;\n                }\n                if (typeof write !== 'undefined') {\n                    payload['write'] = write;\n                }\n                const uri = new URL(this.config.endpoint + path);\n                return yield this.call('post', uri, {\n                    'content-type': 'multipart/form-data',\n                }, payload);\n            }),\n            /**\n             * Get File\n             *\n             * Get a file by its unique ID. This endpoint response returns a JSON object\n             * with the file metadata.\n             *\n             * @param {string} fileId\n             * @throws {AppwriteException}\n             * @returns {Promise}\n             */\n            getFile: (fileId) => __awaiter(this, void 0, void 0, function* () {\n                if (typeof fileId === 'undefined') {\n                    throw new AppwriteException('Missing required parameter: \"fileId\"');\n                }\n                let path = '/storage/files/{fileId}'.replace('{fileId}', fileId);\n                let payload = {};\n                const uri = new URL(this.config.endpoint + path);\n                return yield this.call('get', uri, {\n                    'content-type': 'application/json',\n                }, payload);\n            }),\n            /**\n             * Update File\n             *\n             * Update a file by its unique ID. Only users with write permissions have\n             * access to update this resource.\n             *\n             * @param {string} fileId\n             * @param {string[]} read\n             * @param {string[]} write\n             * @throws {AppwriteException}\n             * @returns {Promise}\n             */\n            updateFile: (fileId, read, write) => __awaiter(this, void 0, void 0, function* () {\n                if (typeof fileId === 'undefined') {\n                    throw new AppwriteException('Missing required parameter: \"fileId\"');\n                }\n                if (typeof read === 'undefined') {\n                    throw new AppwriteException('Missing required parameter: \"read\"');\n                }\n                if (typeof write === 'undefined') {\n                    throw new AppwriteException('Missing required parameter: \"write\"');\n                }\n                let path = '/storage/files/{fileId}'.replace('{fileId}', fileId);\n                let payload = {};\n                if (typeof read !== 'undefined') {\n                    payload['read'] = read;\n                }\n                if (typeof write !== 'undefined') {\n                    payload['write'] = write;\n                }\n                const uri = new URL(this.config.endpoint + path);\n                return yield this.call('put', uri, {\n                    'content-type': 'application/json',\n                }, payload);\n            }),\n            /**\n             * Delete File\n             *\n             * Delete a file by its unique ID. Only users with write permissions have\n             * access to delete this resource.\n             *\n             * @param {string} fileId\n             * @throws {AppwriteException}\n             * @returns {Promise}\n             */\n            deleteFile: (fileId) => __awaiter(this, void 0, void 0, function* () {\n                if (typeof fileId === 'undefined') {\n                    throw new AppwriteException('Missing required parameter: \"fileId\"');\n                }\n                let path = '/storage/files/{fileId}'.replace('{fileId}', fileId);\n                let payload = {};\n                const uri = new URL(this.config.endpoint + path);\n                return yield this.call('delete', uri, {\n                    'content-type': 'application/json',\n                }, payload);\n            }),\n            /**\n             * Get File for Download\n             *\n             * Get a file content by its unique ID. The endpoint response return with a\n             * 'Content-Disposition: attachment' header that tells the browser to start\n             * downloading the file to user downloads directory.\n             *\n             * @param {string} fileId\n             * @throws {AppwriteException}\n             * @returns {URL}\n             */\n            getFileDownload: (fileId) => {\n                if (typeof fileId === 'undefined') {\n                    throw new AppwriteException('Missing required parameter: \"fileId\"');\n                }\n                let path = '/storage/files/{fileId}/download'.replace('{fileId}', fileId);\n                let payload = {};\n                const uri = new URL(this.config.endpoint + path);\n                payload['project'] = this.config.project;\n                for (const [key, value] of Object.entries(this.flatten(payload))) {\n                    uri.searchParams.append(key, value);\n                }\n                return uri;\n            },\n            /**\n             * Get File Preview\n             *\n             * Get a file preview image. Currently, this method supports preview for image\n             * files (jpg, png, and gif), other supported formats, like pdf, docs, slides,\n             * and spreadsheets, will return the file icon image. You can also pass query\n             * string arguments for cutting and resizing your preview image.\n             *\n             * @param {string} fileId\n             * @param {number} width\n             * @param {number} height\n             * @param {string} gravity\n             * @param {number} quality\n             * @param {number} borderWidth\n             * @param {string} borderColor\n             * @param {number} borderRadius\n             * @param {number} opacity\n             * @param {number} rotation\n             * @param {string} background\n             * @param {string} output\n             * @throws {AppwriteException}\n             * @returns {URL}\n             */\n            getFilePreview: (fileId, width, height, gravity, quality, borderWidth, borderColor, borderRadius, opacity, rotation, background, output) => {\n                if (typeof fileId === 'undefined') {\n                    throw new AppwriteException('Missing required parameter: \"fileId\"');\n                }\n                let path = '/storage/files/{fileId}/preview'.replace('{fileId}', fileId);\n                let payload = {};\n                if (typeof width !== 'undefined') {\n                    payload['width'] = width;\n                }\n                if (typeof height !== 'undefined') {\n                    payload['height'] = height;\n                }\n                if (typeof gravity !== 'undefined') {\n                    payload['gravity'] = gravity;\n                }\n                if (typeof quality !== 'undefined') {\n                    payload['quality'] = quality;\n                }\n                if (typeof borderWidth !== 'undefined') {\n                    payload['borderWidth'] = borderWidth;\n                }\n                if (typeof borderColor !== 'undefined') {\n                    payload['borderColor'] = borderColor;\n                }\n                if (typeof borderRadius !== 'undefined') {\n                    payload['borderRadius'] = borderRadius;\n                }\n                if (typeof opacity !== 'undefined') {\n                    payload['opacity'] = opacity;\n                }\n                if (typeof rotation !== 'undefined') {\n                    payload['rotation'] = rotation;\n                }\n                if (typeof background !== 'undefined') {\n                    payload['background'] = background;\n                }\n                if (typeof output !== 'undefined') {\n                    payload['output'] = output;\n                }\n                const uri = new URL(this.config.endpoint + path);\n                payload['project'] = this.config.project;\n                for (const [key, value] of Object.entries(this.flatten(payload))) {\n                    uri.searchParams.append(key, value);\n                }\n                return uri;\n            },\n            /**\n             * Get File for View\n             *\n             * Get a file content by its unique ID. This endpoint is similar to the\n             * download method but returns with no  'Content-Disposition: attachment'\n             * header.\n             *\n             * @param {string} fileId\n             * @throws {AppwriteException}\n             * @returns {URL}\n             */\n            getFileView: (fileId) => {\n                if (typeof fileId === 'undefined') {\n                    throw new AppwriteException('Missing required parameter: \"fileId\"');\n                }\n                let path = '/storage/files/{fileId}/view'.replace('{fileId}', fileId);\n                let payload = {};\n                const uri = new URL(this.config.endpoint + path);\n                payload['project'] = this.config.project;\n                for (const [key, value] of Object.entries(this.flatten(payload))) {\n                    uri.searchParams.append(key, value);\n                }\n                return uri;\n            }\n        };\n        this.teams = {\n            /**\n             * List Teams\n             *\n             * Get a list of all the teams in which the current user is a member. You can\n             * use the parameters to filter your results.\n             *\n             * In admin mode, this endpoint returns a list of all the teams in the current\n             * project. [Learn more about different API modes](/docs/admin).\n             *\n             * @param {string} search\n             * @param {number} limit\n             * @param {number} offset\n             * @param {string} cursor\n             * @param {string} cursorDirection\n             * @param {string} orderType\n             * @throws {AppwriteException}\n             * @returns {Promise}\n             */\n            list: (search, limit, offset, cursor, cursorDirection, orderType) => __awaiter(this, void 0, void 0, function* () {\n                let path = '/teams';\n                let payload = {};\n                if (typeof search !== 'undefined') {\n                    payload['search'] = search;\n                }\n                if (typeof limit !== 'undefined') {\n                    payload['limit'] = limit;\n                }\n                if (typeof offset !== 'undefined') {\n                    payload['offset'] = offset;\n                }\n                if (typeof cursor !== 'undefined') {\n                    payload['cursor'] = cursor;\n                }\n                if (typeof cursorDirection !== 'undefined') {\n                    payload['cursorDirection'] = cursorDirection;\n                }\n                if (typeof orderType !== 'undefined') {\n                    payload['orderType'] = orderType;\n                }\n                const uri = new URL(this.config.endpoint + path);\n                return yield this.call('get', uri, {\n                    'content-type': 'application/json',\n                }, payload);\n            }),\n            /**\n             * Create Team\n             *\n             * Create a new team. The user who creates the team will automatically be\n             * assigned as the owner of the team. Only the users with the owner role can\n             * invite new members, add new owners and delete or update the team.\n             *\n             * @param {string} teamId\n             * @param {string} name\n             * @param {string[]} roles\n             * @throws {AppwriteException}\n             * @returns {Promise}\n             */\n            create: (teamId, name, roles) => __awaiter(this, void 0, void 0, function* () {\n                if (typeof teamId === 'undefined') {\n                    throw new AppwriteException('Missing required parameter: \"teamId\"');\n                }\n                if (typeof name === 'undefined') {\n                    throw new AppwriteException('Missing required parameter: \"name\"');\n                }\n                let path = '/teams';\n                let payload = {};\n                if (typeof teamId !== 'undefined') {\n                    payload['teamId'] = teamId;\n                }\n                if (typeof name !== 'undefined') {\n                    payload['name'] = name;\n                }\n                if (typeof roles !== 'undefined') {\n                    payload['roles'] = roles;\n                }\n                const uri = new URL(this.config.endpoint + path);\n                return yield this.call('post', uri, {\n                    'content-type': 'application/json',\n                }, payload);\n            }),\n            /**\n             * Get Team\n             *\n             * Get a team by its ID. All team members have read access for this resource.\n             *\n             * @param {string} teamId\n             * @throws {AppwriteException}\n             * @returns {Promise}\n             */\n            get: (teamId) => __awaiter(this, void 0, void 0, function* () {\n                if (typeof teamId === 'undefined') {\n                    throw new AppwriteException('Missing required parameter: \"teamId\"');\n                }\n                let path = '/teams/{teamId}'.replace('{teamId}', teamId);\n                let payload = {};\n                const uri = new URL(this.config.endpoint + path);\n                return yield this.call('get', uri, {\n                    'content-type': 'application/json',\n                }, payload);\n            }),\n            /**\n             * Update Team\n             *\n             * Update a team using its ID. Only members with the owner role can update the\n             * team.\n             *\n             * @param {string} teamId\n             * @param {string} name\n             * @throws {AppwriteException}\n             * @returns {Promise}\n             */\n            update: (teamId, name) => __awaiter(this, void 0, void 0, function* () {\n                if (typeof teamId === 'undefined') {\n                    throw new AppwriteException('Missing required parameter: \"teamId\"');\n                }\n                if (typeof name === 'undefined') {\n                    throw new AppwriteException('Missing required parameter: \"name\"');\n                }\n                let path = '/teams/{teamId}'.replace('{teamId}', teamId);\n                let payload = {};\n                if (typeof name !== 'undefined') {\n                    payload['name'] = name;\n                }\n                const uri = new URL(this.config.endpoint + path);\n                return yield this.call('put', uri, {\n                    'content-type': 'application/json',\n                }, payload);\n            }),\n            /**\n             * Delete Team\n             *\n             * Delete a team using its ID. Only team members with the owner role can\n             * delete the team.\n             *\n             * @param {string} teamId\n             * @throws {AppwriteException}\n             * @returns {Promise}\n             */\n            delete: (teamId) => __awaiter(this, void 0, void 0, function* () {\n                if (typeof teamId === 'undefined') {\n                    throw new AppwriteException('Missing required parameter: \"teamId\"');\n                }\n                let path = '/teams/{teamId}'.replace('{teamId}', teamId);\n                let payload = {};\n                const uri = new URL(this.config.endpoint + path);\n                return yield this.call('delete', uri, {\n                    'content-type': 'application/json',\n                }, payload);\n            }),\n            /**\n             * Get Team Memberships\n             *\n             * Use this endpoint to list a team's members using the team's ID. All team\n             * members have read access to this endpoint.\n             *\n             * @param {string} teamId\n             * @param {string} search\n             * @param {number} limit\n             * @param {number} offset\n             * @param {string} cursor\n             * @param {string} cursorDirection\n             * @param {string} orderType\n             * @throws {AppwriteException}\n             * @returns {Promise}\n             */\n            getMemberships: (teamId, search, limit, offset, cursor, cursorDirection, orderType) => __awaiter(this, void 0, void 0, function* () {\n                if (typeof teamId === 'undefined') {\n                    throw new AppwriteException('Missing required parameter: \"teamId\"');\n                }\n                let path = '/teams/{teamId}/memberships'.replace('{teamId}', teamId);\n                let payload = {};\n                if (typeof search !== 'undefined') {\n                    payload['search'] = search;\n                }\n                if (typeof limit !== 'undefined') {\n                    payload['limit'] = limit;\n                }\n                if (typeof offset !== 'undefined') {\n                    payload['offset'] = offset;\n                }\n                if (typeof cursor !== 'undefined') {\n                    payload['cursor'] = cursor;\n                }\n                if (typeof cursorDirection !== 'undefined') {\n                    payload['cursorDirection'] = cursorDirection;\n                }\n                if (typeof orderType !== 'undefined') {\n                    payload['orderType'] = orderType;\n                }\n                const uri = new URL(this.config.endpoint + path);\n                return yield this.call('get', uri, {\n                    'content-type': 'application/json',\n                }, payload);\n            }),\n            /**\n             * Create Team Membership\n             *\n             * Invite a new member to join your team. If initiated from the client SDK, an\n             * email with a link to join the team will be sent to the member's email\n             * address and an account will be created for them should they not be signed\n             * up already. If initiated from server-side SDKs, the new member will\n             * automatically be added to the team.\n             *\n             * Use the 'url' parameter to redirect the user from the invitation email back\n             * to your app. When the user is redirected, use the [Update Team Membership\n             * Status](/docs/client/teams#teamsUpdateMembershipStatus) endpoint to allow\n             * the user to accept the invitation to the team.\n             *\n             * Please note that to avoid a [Redirect\n             * Attack](https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.md)\n             * the only valid redirect URL's are the once from domains you have set when\n             * adding your platforms in the console interface.\n             *\n             * @param {string} teamId\n             * @param {string} email\n             * @param {string[]} roles\n             * @param {string} url\n             * @param {string} name\n             * @throws {AppwriteException}\n             * @returns {Promise}\n             */\n            createMembership: (teamId, email, roles, url, name) => __awaiter(this, void 0, void 0, function* () {\n                if (typeof teamId === 'undefined') {\n                    throw new AppwriteException('Missing required parameter: \"teamId\"');\n                }\n                if (typeof email === 'undefined') {\n                    throw new AppwriteException('Missing required parameter: \"email\"');\n                }\n                if (typeof roles === 'undefined') {\n                    throw new AppwriteException('Missing required parameter: \"roles\"');\n                }\n                if (typeof url === 'undefined') {\n                    throw new AppwriteException('Missing required parameter: \"url\"');\n                }\n                let path = '/teams/{teamId}/memberships'.replace('{teamId}', teamId);\n                let payload = {};\n                if (typeof email !== 'undefined') {\n                    payload['email'] = email;\n                }\n                if (typeof roles !== 'undefined') {\n                    payload['roles'] = roles;\n                }\n                if (typeof url !== 'undefined') {\n                    payload['url'] = url;\n                }\n                if (typeof name !== 'undefined') {\n                    payload['name'] = name;\n                }\n                const uri = new URL(this.config.endpoint + path);\n                return yield this.call('post', uri, {\n                    'content-type': 'application/json',\n                }, payload);\n            }),\n            /**\n             * Get Team Membership\n             *\n             * Get a team member by the membership unique id. All team members have read\n             * access for this resource.\n             *\n             * @param {string} teamId\n             * @param {string} membershipId\n             * @throws {AppwriteException}\n             * @returns {Promise}\n             */\n            getMembership: (teamId, membershipId) => __awaiter(this, void 0, void 0, function* () {\n                if (typeof teamId === 'undefined') {\n                    throw new AppwriteException('Missing required parameter: \"teamId\"');\n                }\n                if (typeof membershipId === 'undefined') {\n                    throw new AppwriteException('Missing required parameter: \"membershipId\"');\n                }\n                let path = '/teams/{teamId}/memberships/{membershipId}'.replace('{teamId}', teamId).replace('{membershipId}', membershipId);\n                let payload = {};\n                const uri = new URL(this.config.endpoint + path);\n                return yield this.call('get', uri, {\n                    'content-type': 'application/json',\n                }, payload);\n            }),\n            /**\n             * Update Membership Roles\n             *\n             * Modify the roles of a team member. Only team members with the owner role\n             * have access to this endpoint. Learn more about [roles and\n             * permissions](/docs/permissions).\n             *\n             * @param {string} teamId\n             * @param {string} membershipId\n             * @param {string[]} roles\n             * @throws {AppwriteException}\n             * @returns {Promise}\n             */\n            updateMembershipRoles: (teamId, membershipId, roles) => __awaiter(this, void 0, void 0, function* () {\n                if (typeof teamId === 'undefined') {\n                    throw new AppwriteException('Missing required parameter: \"teamId\"');\n                }\n                if (typeof membershipId === 'undefined') {\n                    throw new AppwriteException('Missing required parameter: \"membershipId\"');\n                }\n                if (typeof roles === 'undefined') {\n                    throw new AppwriteException('Missing required parameter: \"roles\"');\n                }\n                let path = '/teams/{teamId}/memberships/{membershipId}'.replace('{teamId}', teamId).replace('{membershipId}', membershipId);\n                let payload = {};\n                if (typeof roles !== 'undefined') {\n                    payload['roles'] = roles;\n                }\n                const uri = new URL(this.config.endpoint + path);\n                return yield this.call('patch', uri, {\n                    'content-type': 'application/json',\n                }, payload);\n            }),\n            /**\n             * Delete Team Membership\n             *\n             * This endpoint allows a user to leave a team or for a team owner to delete\n             * the membership of any other team member. You can also use this endpoint to\n             * delete a user membership even if it is not accepted.\n             *\n             * @param {string} teamId\n             * @param {string} membershipId\n             * @throws {AppwriteException}\n             * @returns {Promise}\n             */\n            deleteMembership: (teamId, membershipId) => __awaiter(this, void 0, void 0, function* () {\n                if (typeof teamId === 'undefined') {\n                    throw new AppwriteException('Missing required parameter: \"teamId\"');\n                }\n                if (typeof membershipId === 'undefined') {\n                    throw new AppwriteException('Missing required parameter: \"membershipId\"');\n                }\n                let path = '/teams/{teamId}/memberships/{membershipId}'.replace('{teamId}', teamId).replace('{membershipId}', membershipId);\n                let payload = {};\n                const uri = new URL(this.config.endpoint + path);\n                return yield this.call('delete', uri, {\n                    'content-type': 'application/json',\n                }, payload);\n            }),\n            /**\n             * Update Team Membership Status\n             *\n             * Use this endpoint to allow a user to accept an invitation to join a team\n             * after being redirected back to your app from the invitation email received\n             * by the user.\n             *\n             * @param {string} teamId\n             * @param {string} membershipId\n             * @param {string} userId\n             * @param {string} secret\n             * @throws {AppwriteException}\n             * @returns {Promise}\n             */\n            updateMembershipStatus: (teamId, membershipId, userId, secret) => __awaiter(this, void 0, void 0, function* () {\n                if (typeof teamId === 'undefined') {\n                    throw new AppwriteException('Missing required parameter: \"teamId\"');\n                }\n                if (typeof membershipId === 'undefined') {\n                    throw new AppwriteException('Missing required parameter: \"membershipId\"');\n                }\n                if (typeof userId === 'undefined') {\n                    throw new AppwriteException('Missing required parameter: \"userId\"');\n                }\n                if (typeof secret === 'undefined') {\n                    throw new AppwriteException('Missing required parameter: \"secret\"');\n                }\n                let path = '/teams/{teamId}/memberships/{membershipId}/status'.replace('{teamId}', teamId).replace('{membershipId}', membershipId);\n                let payload = {};\n                if (typeof userId !== 'undefined') {\n                    payload['userId'] = userId;\n                }\n                if (typeof secret !== 'undefined') {\n                    payload['secret'] = secret;\n                }\n                const uri = new URL(this.config.endpoint + path);\n                return yield this.call('patch', uri, {\n                    'content-type': 'application/json',\n                }, payload);\n            })\n        };\n    }\n    /**\n     * Set Endpoint\n     *\n     * Your project endpoint\n     *\n     * @param {string} endpoint\n     *\n     * @returns {this}\n     */\n    setEndpoint(endpoint) {\n        this.config.endpoint = endpoint;\n        this.config.endpointRealtime = this.config.endpointRealtime || this.config.endpoint.replace('https://', 'wss://').replace('http://', 'ws://');\n        return this;\n    }\n    /**\n     * Set Realtime Endpoint\n     *\n     * @param {string} endpointRealtime\n     *\n     * @returns {this}\n     */\n    setEndpointRealtime(endpointRealtime) {\n        this.config.endpointRealtime = endpointRealtime;\n        return this;\n    }\n    /**\n     * Set Project\n     *\n     * Your project ID\n     *\n     * @param value string\n     *\n     * @return {this}\n     */\n    setProject(value) {\n        this.headers['X-Appwrite-Project'] = value;\n        this.config.project = value;\n        return this;\n    }\n    /**\n     * Set JWT\n     *\n     * Your secret JSON Web Token\n     *\n     * @param value string\n     *\n     * @return {this}\n     */\n    setJWT(value) {\n        this.headers['X-Appwrite-JWT'] = value;\n        this.config.jwt = value;\n        return this;\n    }\n    /**\n     * Set Locale\n     *\n     * @param value string\n     *\n     * @return {this}\n     */\n    setLocale(value) {\n        this.headers['X-Appwrite-Locale'] = value;\n        this.config.locale = value;\n        return this;\n    }\n    /**\n     * Subscribes to Appwrite events and passes you the payload in realtime.\n     *\n     * @param {string|string[]} channels\n     * Channel to subscribe - pass a single channel as a string or multiple with an array of strings.\n     *\n     * Possible channels are:\n     * - account\n     * - collections\n     * - collections.[ID]\n     * - collections.[ID].documents\n     * - documents\n     * - documents.[ID]\n     * - files\n     * - files.[ID]\n     * - executions\n     * - executions.[ID]\n     * - functions.[ID]\n     * - teams\n     * - teams.[ID]\n     * - memberships\n     * - memberships.[ID]\n     * @param {(payload: RealtimeMessage) => void} callback Is called on every realtime update.\n     * @returns {() => void} Unsubscribes from events.\n     */\n    subscribe(channels, callback) {\n        let channelArray = typeof channels === 'string' ? [channels] : channels;\n        channelArray.forEach(channel => this.realtime.channels.add(channel));\n        const counter = this.realtime.subscriptionsCounter++;\n        this.realtime.subscriptions.set(counter, {\n            channels: channelArray,\n            callback\n        });\n        this.realtime.connect();\n        return () => {\n            this.realtime.subscriptions.delete(counter);\n            this.realtime.cleanUp(channelArray);\n            this.realtime.connect();\n        };\n    }\n    call(method, url, headers = {}, params = {}) {\n        var _a, _b;\n        return __awaiter(this, void 0, void 0, function* () {\n            method = method.toUpperCase();\n            headers = Object.assign(Object.assign({}, headers), this.headers);\n            let options = {\n                method,\n                headers,\n                credentials: 'include'\n            };\n            if (typeof window !== 'undefined' && window.localStorage) {\n                headers['X-Fallback-Cookies'] = (_a = window.localStorage.getItem('cookieFallback')) !== null && _a !== void 0 ? _a : '';\n            }\n            if (method === 'GET') {\n                for (const [key, value] of Object.entries(this.flatten(params))) {\n                    url.searchParams.append(key, value);\n                }\n            }\n            else {\n                switch (headers['content-type']) {\n                    case 'application/json':\n                        options.body = JSON.stringify(params);\n                        break;\n                    case 'multipart/form-data':\n                        let formData = new FormData();\n                        for (const key in params) {\n                            if (Array.isArray(params[key])) {\n                                params[key].forEach((value) => {\n                                    formData.append(key + '[]', value);\n                                });\n                            }\n                            else {\n                                formData.append(key, params[key]);\n                            }\n                        }\n                        options.body = formData;\n                        delete headers['content-type'];\n                        break;\n                }\n            }\n            try {\n                let data = null;\n                const response = yield (0,cross_fetch__WEBPACK_IMPORTED_MODULE_1__.fetch)(url.toString(), options);\n                if ((_b = response.headers.get('content-type')) === null || _b === void 0 ? void 0 : _b.includes('application/json')) {\n                    data = yield response.json();\n                }\n                else {\n                    data = {\n                        message: yield response.text()\n                    };\n                }\n                if (400 <= response.status) {\n                    throw new AppwriteException(data === null || data === void 0 ? void 0 : data.message, response.status, data);\n                }\n                const cookieFallback = response.headers.get('X-Fallback-Cookies');\n                if (typeof window !== 'undefined' && window.localStorage && cookieFallback) {\n                    window.console.warn('Appwrite is using localStorage for session management. Increase your security by adding a custom domain as your API endpoint.');\n                    window.localStorage.setItem('cookieFallback', cookieFallback);\n                }\n                return data;\n            }\n            catch (e) {\n                if (e instanceof AppwriteException) {\n                    throw e;\n                }\n                throw new AppwriteException(e.message);\n            }\n        });\n    }\n    flatten(data, prefix = '') {\n        let output = {};\n        for (const key in data) {\n            let value = data[key];\n            let finalKey = prefix ? `${prefix}[${key}]` : key;\n            if (Array.isArray(value)) {\n                output = Object.assign(output, this.flatten(value, finalKey));\n            }\n            else {\n                output[finalKey] = value;\n            }\n        }\n        return output;\n    }\n}\nclass Query {\n}\nQuery.equal = (attribute, value) => Query.addQuery(attribute, \"equal\", value);\nQuery.notEqual = (attribute, value) => Query.addQuery(attribute, \"notEqual\", value);\nQuery.lesser = (attribute, value) => Query.addQuery(attribute, \"lesser\", value);\nQuery.lesserEqual = (attribute, value) => Query.addQuery(attribute, \"lesserEqual\", value);\nQuery.greater = (attribute, value) => Query.addQuery(attribute, \"greater\", value);\nQuery.greaterEqual = (attribute, value) => Query.addQuery(attribute, \"greaterEqual\", value);\nQuery.search = (attribute, value) => Query.addQuery(attribute, \"search\", value);\nQuery.addQuery = (attribute, oper, value) => value instanceof Array\n    ? `${attribute}.${oper}(${value\n        .map((v) => Query.parseValues(v))\n        .join(\",\")})`\n    : `${attribute}.${oper}(${Query.parseValues(value)})`;\nQuery.parseValues = (value) => typeof value === \"string\" || value instanceof String\n    ? `\"${value}\"`\n    : `${value}`;\n\n\n//# sourceMappingURL=sdk.js.map\n\n\n//# sourceURL=webpack://appwrite/./node_modules/appwrite/dist/esm/sdk.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.js");
/******/ 	
/******/ })()
;